{"version":3,"sources":["fast_logo.svg","question_mark.png","components/Header.js","components/Movie.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","height","src","fast_logo","text","Movie","movie","onMovieClick","onChecked","width","alt","Title","Poster","question_mark","id","type","onChange","e","defaultValue","Search","useState","searchValue","setSearchValue","value","target","onClick","preventDefault","search","App","movies","setMovies","list","setList","clickedItem","setClickedItem","selected","setSelected","checked","useEffect","fetch","then","response","json","jsonResponse","map","index","key","name","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,wLCY5BC,EATA,SAACC,GACd,OACE,4BAAQC,UAAU,UAChB,yBAAKC,OAAO,KAAKC,IAAKC,MACtB,4BAAKJ,EAAMK,Q,gBCyBFC,EA7BD,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAOpC,OACE,yBAAKR,UAAU,SACb,6BACE,yBACES,MAAM,MACNC,IAAG,4BAAuBJ,EAAMK,OAChCT,IAAsB,QAAjBI,EAAMM,OAAmBC,IAAgBP,EAAMM,UAGxD,yBAAKZ,UAAU,eACb,2BACEc,GAAG,SACHC,KAAK,WACLC,SAlBe,SAACC,GACtBV,EAAaD,EAAMK,OACnBH,EAAUS,IAiBJC,cAAc,IAEhB,4CCcOC,EAtCA,SAACpB,GAAU,MAEcqB,mBAAS,IAFvB,mBAEjBC,EAFiB,KAEJC,EAFI,KAqBxB,OACE,0BAAMtB,UAAU,UACd,2BACEuB,MAAOF,EACPL,SApB2B,SAACC,GAChCK,EAAeL,EAAEO,OAAOD,QAoBpBR,KAAK,SAEP,2BACEU,QAdqB,SAACR,GAC1BA,EAAES,iBACF3B,EAAM4B,OAAON,GANbC,EAAe,KAmBXP,KAAK,SACLQ,MAAM,SACNvB,UAAU,mBCoDH4B,EA7EH,WAAO,IAAD,EACYR,mBAAS,IADrB,mBACTS,EADS,KACDC,EADC,OAEQV,mBAAS,IAFjB,mBAETW,EAFS,KAEHC,EAFG,OAGsBZ,mBAAS,MAH/B,mBAGTa,EAHS,KAGIC,EAHJ,OAIgBd,oBAAS,GAJzB,mBAITe,EAJS,KAICC,EAJD,KAOV7B,EAAe,SAACD,GACpB4B,EAAe5B,IAIXE,EAAY,SAACS,GACjBmB,IAAYnB,EAAEO,OAAOa,UAUvBC,qBAAU,WACRC,MA1BkB,mDA2BfC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLb,EAAUa,EAAaxB,aAE1B,IAGHmB,qBAAU,WACRN,EAAQC,GAAeE,EAAW,SAACJ,GAAD,4BAAcA,GAAd,CAAoBE,KAAe,MACpE,CAACA,EAAaE,IAWjB,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,CAAQI,KAAK,iBACb,kBAAC,EAAD,CAAQuB,OAXG,SAACN,GACdkB,MAAM,8BAAD,OAA+BlB,EAA/B,qBACFmB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLb,EAAUa,EAAaxB,cAQzB,uBAAGnB,UAAU,WAAb,oCAEA,yBAAKA,UAAU,UACZ6B,EAAOe,KAAI,SAACtC,EAAOuC,GAAR,OACV,kBAAC,EAAD,CACEC,IAAG,UAAKD,EAAL,YAAcvC,EAAMK,OACvBL,MAAOA,EACPC,aAAcA,EACdC,UAAWA,QAKjB,yBAAKR,UAAU,YACb,+CACC+B,EAAOA,EAAKa,KAAI,SAACG,EAAMF,GAAP,OAAiB,uBAAGC,IAAKD,GAAQE,MAAa,GAE/D,2BACEtB,QAlDgB,kBACtBM,EACIiB,MAAM,qBAAD,OAAsBjB,IAC3BiB,MAAM,sCAgDJjC,KAAK,SACLf,UAAU,gBACVuB,MAAM,wB,MCnEI0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bac171ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fast_logo.7750b98e.svg\";","module.exports = __webpack_public_path__ + \"static/media/question_mark.06a523d0.png\";","import React from \"react\";\nimport fast_logo from \"../fast_logo.svg\";\n\nconst Header = (props) => {\n  return (\n    <header className=\"header\">\n      <img height=\"50\" src={fast_logo} />\n      <h2>{props.text}</h2>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport question_mark from \"../question_mark.png\";\n\nconst Movie = ({ movie, onMovieClick, onChecked }) => {\n  //function to pass clicked/checked info back to parent\n  const onMovieChecked = (e) => {\n    onMovieClick(movie.Title);\n    onChecked(e);\n  };\n\n  return (\n    <div className=\"movie\">\n      <div>\n        <img\n          width=\"200\"\n          alt={`The movie titled: ${movie.Title}`}\n          src={movie.Poster === \"N/A\" ? question_mark : movie.Poster}\n        />\n      </div>\n      <div className=\"selectMovie\">\n        <input\n          id=\"select\"\n          type=\"checkbox\"\n          onChange={onMovieChecked}\n          defaultValue={false}\n        />\n        <label>Select</label>\n      </div>\n    </div>\n  );\n};\n\nexport default Movie;\n","import React, { useState } from \"react\";\n\nconst Search = (props) => {\n  //set initial search value to empty\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  //set search value according to input\n  const handleSearchInputChanges = (e) => {\n    setSearchValue(e.target.value);\n  };\n\n  //reset search field to empty\n  const resetInputField = () => {\n    setSearchValue(\"\");\n  };\n\n  //execute search & reset\n  const callSearchFunction = (e) => {\n    e.preventDefault();\n    props.search(searchValue);\n    resetInputField();\n  };\n\n  return (\n    <form className=\"search\">\n      <input\n        value={searchValue}\n        onChange={handleSearchInputChanges}\n        type=\"text\"\n      />\n      <input\n        onClick={callSearchFunction}\n        type=\"submit\"\n        value=\"SEARCH\"\n        className=\"searchButton\"\n      />\n    </form>\n  );\n};\n\nexport default Search;\n","import React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\n\n//default search for 'days' so populates on load\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=days&apikey=5cbc208f\";\n\nconst App = () => {\n  const [movies, setMovies] = useState([]);\n  const [list, setList] = useState([]);\n  const [clickedItem, setClickedItem] = useState(null);\n  const [selected, setSelected] = useState(false);\n\n  //sets selected movie\n  const onMovieClick = (movie) => {\n    setClickedItem(movie);\n  };\n\n  //sets check to t/f\n  const onChecked = (e) => {\n    setSelected(e.target.checked ? true : false);\n  };\n\n  //alerts on confirm\n  const confirmSelected = () =>\n    list\n      ? alert(`You have selected ${list}`)\n      : alert(\"Please select at least one movie!\");\n\n  //initial search/load\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        setMovies(jsonResponse.Search);\n      });\n  }, []);\n\n  //add selected movies to array-- this is buggy when checking/unchecking and I would solve with more time\n  useEffect(() => {\n    setList(clickedItem && selected ? (list) => [...list, clickedItem] : \"\");\n  }, [clickedItem, selected]);\n\n  //get searched movies\n  const search = (searchValue) => {\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=5cbc208f`)\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        setMovies(jsonResponse.Search);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <Header text=\"Movie Search\" />\n      <Search search={search} />\n      <p className=\"subhead\">Search for your favorite movies!</p>\n\n      <div className=\"movies\">\n        {movies.map((movie, index) => (\n          <Movie\n            key={`${index}-${movie.Title}`}\n            movie={movie}\n            onMovieClick={onMovieClick}\n            onChecked={onChecked}\n          />\n        ))}\n      </div>\n\n      <div className=\"selected\">\n        <h2>SELECTED MOVIES</h2>\n        {list ? list.map((name, index) => <p key={index}>{name}</p>) : \"\"}\n\n        <input\n          onClick={confirmSelected}\n          type=\"submit\"\n          className=\"confirmButton\"\n          value=\"Confirm selected\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}